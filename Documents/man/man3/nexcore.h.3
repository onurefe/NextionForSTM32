.TH "Inc/nexcore.h" 3 "Fri Aug 14 2020" "Version 1" "NextionForSTM32" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Inc/nexcore.h
.SH SYNOPSIS
.br
.PP
\fC#include 'global\&.h'\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBNexcore_Error_t\fP"
.br
.ti -1c
.RI "typedef uint8_t \fBNexcore_Info_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBFALSE\fP = 0, \fBTRUE\fP = !FALSE, \fBNEXCORE_ERROR_INVALID_OPERATION\fP = 0, \fBNEXCORE_ERROR_COMMUNICATION_PROBLEM\fP, \fBNEXCORE_ERROR_BUFFER_OVERFLOW\fP, \fBNEXCORE_ERROR_NO_RESPONSE\fP, \fBNEXCORE_ERROR_INVALID_RECV_MSG\fP }"
.br
.ti -1c
.RI "enum { \fBUNINIT\fP = 0, \fBREADY\fP, \fBOPERATING\fP, \fBNEXCORE_INFO_READY\fP = 0, \fBNEXCORE_INFO_INSTRUCTION_SUCCESSFUL\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBNexcore_Init\fP (void)"
.br
.RI "Initializes module\&. "
.ti -1c
.RI "void \fBNexcore_Start\fP (void)"
.br
.RI "Starts the operation of the module\&. "
.ti -1c
.RI "void \fBNexcore_Execute\fP (void)"
.br
.RI "This function should be called to transfer control to this module to complete it's pending operations\&. "
.ti -1c
.RI "void \fBNexcore_Stop\fP (void)"
.br
.RI "Stops the module\&. "
.ti -1c
.RI "uint8_t \fBNexcore_ParseReturnedString\fP (char *buff, uint8_t maxLength)"
.br
.RI "After receiving string return data; callback is invoked to inform this to the application program\&. Then the application program should call this function to parse the string from the internal receive buffer of the module\&. String can be parsed as chunks of strings or as a whole at a time\&. "
.ti -1c
.RI "uint8_t \fBNexcore_EnqueueMsg\fP (char **chunks, uint8_t chunkCount)"
.br
.RI "Concats the strings given as chunks and enqueues them to the module's TxQueue\&. "
.ti -1c
.RI "uint8_t \fBNexcore_Page\fP (char *pageName)"
.br
.RI "Changes active page\&. "
.ti -1c
.RI "uint8_t \fBNexcore_Get\fP (char *componentName, char *attribute)"
.br
.RI "Gets the value of a component's attribute or a system variable\&. "
.ti -1c
.RI "uint8_t \fBNexcore_Set\fP (char *componentName, char *attribute, char *txt)"
.br
.RI "Sets the value of a component's attribute or a system variable\&. "
.ti -1c
.RI "uint8_t \fBNexcore_Visible\fP (char *componentName, \fBBool_t\fP visible)"
.br
.RI "Makes a component visible or invisible\&. "
.ti -1c
.RI "uint8_t \fBNexcore_AddPointToWaveform\fP (uint8_t componentId, uint8_t channel, uint16_t y)"
.br
.RI "Adds point to waveform component's channel\&. "
.ti -1c
.RI "uint8_t \fBNexcore_ClearWaveform\fP (uint8_t componentId, uint8_t channel)"
.br
.RI "Clear waveform component's channel\&. "
.ti -1c
.RI "uint8_t \fBNexcore_Reset\fP (void)"
.br
.RI "Resets the screen\&. "
.ti -1c
.RI "void \fBNexcore_ErrorCb\fP (uint8_t activeTransactionId, \fBNexcore_Error_t\fP error)"
.br
.RI "Default implementation of the error callback function\&. "
.ti -1c
.RI "void \fBNexcore_InfoCb\fP (uint8_t activeTransactionId, \fBNexcore_Info_t\fP info)"
.br
.RI "Default implementation of the info callback function\&. "
.ti -1c
.RI "void \fBNexcore_TouchEventCb\fP (uint8_t activeTransactionId, uint8_t pageId, uint8_t componentId, \fBBool_t\fP pressed)"
.br
.RI "Default implementation of the touch event callback function\&. "
.ti -1c
.RI "void \fBNexcore_GetStringRspCb\fP (uint8_t activeTransactionId, uint8_t stringLength)"
.br
.RI "Default implementation of the get(string attribute) response callback function\&. Nexcore_ParseReturnedString function should be called after this function to parse the returned string\&. "
.ti -1c
.RI "void \fBNexcore_GetNumberRspCb\fP (uint8_t activeTransactionId, uint32_t value)"
.br
.RI "Default implementation of the get(numeric attribute) response callback function\&. "
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef uint8_t \fBNexcore_Error_t\fP"

.SS "typedef uint8_t \fBNexcore_Info_t\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFALSE \fP\fP
.TP
\fB\fITRUE \fP\fP
.TP
\fB\fINEXCORE_ERROR_INVALID_OPERATION \fP\fP
.TP
\fB\fINEXCORE_ERROR_COMMUNICATION_PROBLEM \fP\fP
.TP
\fB\fINEXCORE_ERROR_BUFFER_OVERFLOW \fP\fP
.TP
\fB\fINEXCORE_ERROR_NO_RESPONSE \fP\fP
.TP
\fB\fINEXCORE_ERROR_INVALID_RECV_MSG \fP\fP
.SS "anonymous enum"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIUNINIT \fP\fP
.TP
\fB\fIREADY \fP\fP
.TP
\fB\fIOPERATING \fP\fP
.TP
\fB\fINEXCORE_INFO_READY \fP\fP
.TP
\fB\fINEXCORE_INFO_INSTRUCTION_SUCCESSFUL \fP\fP
.SH "Function Documentation"
.PP 
.SS "uint8_t Nexcore_AddPointToWaveform (uint8_t componentId, uint8_t channel, uint16_t y)"

.PP
Adds point to waveform component's channel\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomponentId\fP Id of the component\&. 
.br
\fIchannel\fP Channel which the point will be added\&. 
.br
\fIy\fP Height of the point\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "uint8_t Nexcore_ClearWaveform (uint8_t componentId, uint8_t channel)"

.PP
Clear waveform component's channel\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomponentId\fP Id of the component\&. 
.br
\fIchannel\fP Channel which will be cleared\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "uint8_t Nexcore_EnqueueMsg (char ** chunks, uint8_t chunkCount)"

.PP
Concats the strings given as chunks and enqueues them to the module's TxQueue\&. 
.PP
\fBParameters\fP
.RS 4
\fIchunks\fP Array of pointers to the strings\&. 
.br
\fIchunkCount\fP Number of chunks to be concatted\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "void Nexcore_ErrorCb (uint8_t activeTransactionId, \fBNexcore_Error_t\fP error)"

.PP
Default implementation of the error callback function\&. 
.PP
\fBParameters\fP
.RS 4
\fIactiveTransactionId\fP Current transaction ID\&. 
.br
\fIerror\fP Error code\&. 
.RE
.PP

.SS "void Nexcore_Execute (void)"

.PP
This function should be called to transfer control to this module to complete it's pending operations\&. 
.SS "uint8_t Nexcore_Get (char * name, char * attribute)"

.PP
Gets the value of a component's attribute or a system variable\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the component or the system variable\&. 
.br
\fIattribute\fP Name of the component's attribute\&. NULL pointer if system variable is to be get\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "void Nexcore_GetNumberRspCb (uint8_t ActiveTransactionId, uint32_t value)"

.PP
Default implementation of the get(numeric attribute) response callback function\&. 
.PP
\fBParameters\fP
.RS 4
\fIactiveTransactionId\fP Current transaction ID\&. 
.br
\fIvalue\fP Returned value\&. 
.RE
.PP

.SS "void Nexcore_GetStringRspCb (uint8_t activeTransactionId, uint8_t stringLength)"

.PP
Default implementation of the get(string attribute) response callback function\&. Nexcore_ParseReturnedString function should be called after this function to parse the returned string\&. 
.PP
\fBParameters\fP
.RS 4
\fIactiveTransactionId\fP Current transaction ID\&. 
.br
\fIstringLength\fP Length of the returned string\&. 
.RE
.PP

.SS "void Nexcore_InfoCb (uint8_t activeTransactionId, \fBNexcore_Info_t\fP info)"

.PP
Default implementation of the info callback function\&. 
.PP
\fBParameters\fP
.RS 4
\fIactiveTransactionId\fP Current transaction ID\&. 
.br
\fIerror\fP Info code\&. 
.RE
.PP

.SS "void Nexcore_Init (void)"

.PP
Initializes module\&. 
.SS "uint8_t Nexcore_Page (char * pageName)"

.PP
Changes active page\&. 
.PP
\fBParameters\fP
.RS 4
\fIpageName\fP Name of the page to be activated\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "uint8_t Nexcore_ParseReturnedString (char * buff, uint8_t maxLength)"

.PP
After receiving string return data; callback is invoked to inform this to the application program\&. Then the application program should call this function to parse the string from the internal receive buffer of the module\&. String can be parsed as chunks of strings or as a whole at a time\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuff\fP Pointer of the buffer to put received string\&. 
.br
\fImaxLength\fP Length of the parsing\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fICharacters\fP to parse\&. 
.RE
.PP

.SS "uint8_t Nexcore_Reset (void)"

.PP
Resets the screen\&. 
.SS "uint8_t Nexcore_Set (char * componentName, char * attribute, char * txt)"

.PP
Sets the value of a component's attribute or a system variable\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the component or the system variable\&. 
.br
\fIattribute\fP Name of the component's attribute\&. NULL pointer if system variable is to be set\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SS "void Nexcore_Start (void)"

.PP
Starts the operation of the module\&. 
.SS "void Nexcore_Stop (void)"

.PP
Stops the module\&. 
.SS "void Nexcore_TouchEventCb (uint8_t activeTransactionId, uint8_t pageId, uint8_t componentId, \fBBool_t\fP pressed)"

.PP
Default implementation of the touch event callback function\&. 
.PP
\fBParameters\fP
.RS 4
\fIactiveTransactionId\fP Current transaction ID\&. 
.br
\fIpageId\fP Active page ID\&. 
.br
\fIcomponentId\fP ID of the component whom touch event is triggered\&. 
.br
\fIpressed\fP Touch event type; TRUE if pressed FALSE if released\&. 
.RE
.PP

.SS "uint8_t Nexcore_Visible (char * componentName, \fBBool_t\fP visible)"

.PP
Makes a component visible or invisible\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomponentName\fP Name of the component\&. 
.br
\fIvisible\fP Set FALSE to make a component invisible\&. Set TRUE to make a component visible\&.
.RE
.PP
\fBReturn values\fP
.RS 4
\fITransactionId\&.\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for NextionForSTM32 from the source code\&.
